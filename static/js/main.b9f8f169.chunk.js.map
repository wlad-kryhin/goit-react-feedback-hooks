{"version":3,"sources":["components/Section/Section.module.css","components/Buttons/Buttons.module.css","components/Buttons/Buttons.jsx","components/Section/Section.jsx","components/Statics/Statics.jsx","components/Notification/Notification.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Buttons","options","feedBack","map","option","className","s","button","type","onClick","Section","title","children","section","Statics","good","neutral","bad","totalFeedback","positiveFeedBack","Notification","text","App","useState","state","setState","totalFeedBack","Object","values","reduce","acc","keys","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,yB,iBCA7DD,EAAOC,QAAU,CAAC,OAAS,0B,8KCCZ,SAASC,EAAT,GAAyC,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SACzC,OAAOD,EAAQE,KAAI,SAACC,GAClB,OACE,wBACEC,UAAWC,IAAEC,OACbC,KAAK,SAELC,QAAS,kBAAMP,EAASE,IAJ1B,SAMGA,GAHIA,M,oBCLE,SAASM,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,0BAASP,UAAWC,IAAEO,QAAtB,UACE,oBAAIR,UAAWC,IAAEK,MAAjB,SAAyBA,IACxBC,KCNQ,SAASE,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,cACAC,EACC,EADDA,iBAEA,OACE,+BACE,yCAAYJ,KACZ,4CAAeC,KACf,wCAAWC,KACX,0CAAaC,KACb,sDAAyBC,EAAzB,UCbS,SAASC,EAAT,GAAiC,IAATC,EAAQ,EAARA,KACrC,OAAO,4BAAIA,ICiDEC,MA7Cf,WACE,MAA0BC,mBAAS,CACjCR,KAAM,EACNC,QAAS,EACTC,IAAK,IAHP,mBAAOO,EAAP,KAAcC,EAAd,KAaMC,EAAgB,WACpB,OAAOC,OAAOC,OAAOJ,GAAOK,QAAO,SAACC,EAAK1B,GAAN,OAAiB0B,EAAM1B,IAAQ,IAMpE,OACE,sBAAKC,UAAU,YAAf,UACE,cAACK,EAAD,CAASC,MAAM,wBAAf,SACE,qBAAKN,UAAU,qBAAf,SACE,cAACL,EAAD,CAASC,QAAS0B,OAAOI,KAAKP,GAAQtB,SAlBvB,SAACE,GACtBqB,GAAS,SAACD,GAAD,mBAAC,eACLA,GADI,kBAENpB,EAASoB,EAAMpB,GAAU,cAkB1B,cAACM,EAAD,CAASC,MAAM,aAAf,SACuB,IAApBe,IACC,cAACN,EAAD,CAAcC,KAVN,sBAYR,cAACP,EAAD,CACEC,KAAMS,EAAMT,KACZC,QAASQ,EAAMR,QACfC,IAAKO,EAAMP,IACXC,cAAeQ,IACfP,iBAnBDa,KAAKC,MAAOT,EAAMT,KAAOW,IAAmB,KAAO,WCZ/CQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b9f8f169.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__-Uhkq\",\"title\":\"Section_title__SrqLO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Buttons_button__3k6E3\"};","import s from \"./Buttons.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nexport default function Buttons({ options, feedBack }) {\r\n  return options.map((option) => {\r\n    return (\r\n      <button\r\n        className={s.button}\r\n        type=\"button\"\r\n        key={option}\r\n        onClick={() => feedBack(option)}\r\n      >\r\n        {option}\r\n      </button>\r\n    );\r\n  });\r\n}\r\nButtons.propTypes = {\r\n  options: PropTypes.object,\r\n  feedBack: PropTypes.func,\r\n};\r\n","import s from \"./Section.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <section className={s.section}>\r\n      <h2 className={s.title}>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.element,\r\n};\r\n","import PropTypes from \"prop-types\";\r\nexport default function Statics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  totalFeedback,\r\n  positiveFeedBack,\r\n}) {\r\n  return (\r\n    <ul>\r\n      <li>Good : {good}</li>\r\n      <li>Neutral : {neutral}</li>\r\n      <li>Bad : {bad}</li>\r\n      <li>Total : {totalFeedback}</li>\r\n      <li>Positive feedback : {positiveFeedBack}%</li>\r\n    </ul>\r\n  );\r\n}\r\nStatics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  totalFeedback: PropTypes.number,\r\n  positiveFeedBack: PropTypes.number,\r\n};\r\n","import PropTypes from \"prop-types\";\r\nexport default function Notification({ text }) {\r\n  return <p>{text}</p>;\r\n}\r\nNotification.propTypes = {\r\n  text: PropTypes.string,\r\n};\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport Buttons from \"./components/Buttons/Buttons\";\nimport Section from \"./components/Section/Section\";\nimport Statics from \"./components/Statics/Statics\";\nimport Notification from \"./components/Notification/Notification\";\nfunction App() {\n  const [state, setState] = useState({\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  });\n\n  const handleFeedBack = (option) => {\n    setState((state) => ({\n      ...state,\n      [option]: state[option] + 1,\n    }));\n  };\n\n  const totalFeedBack = () => {\n    return Object.values(state).reduce((acc, option) => acc + option, 0);\n  };\n  const totalPositiveFeedBack = () => {\n    return Math.round((state.good / totalFeedBack()) * 100 || 0);\n  };\n  const message = \"No feedback given\";\n  return (\n    <div className=\"container\">\n      <Section title=\"Please leave feedback\">\n        <div className=\"buttons__container\">\n          <Buttons options={Object.keys(state)} feedBack={handleFeedBack} />\n        </div>\n      </Section>\n      <Section title=\"Statistics\">\n        {totalFeedBack() === 0 ? (\n          <Notification text={message} />\n        ) : (\n          <Statics\n            good={state.good}\n            neutral={state.neutral}\n            bad={state.bad}\n            totalFeedback={totalFeedBack()}\n            positiveFeedBack={totalPositiveFeedBack()}\n          />\n        )}\n      </Section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}